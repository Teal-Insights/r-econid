[{"path":"https://teal-insights.github.io/r-econid/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Teal Insights Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://teal-insights.github.io/r-econid/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Teal Insights. Author, maintainer, copyright holder.","code":""},{"path":"https://teal-insights.github.io/r-econid/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teal Insights (2025). econid: Economic Entity Identifier Standardization. R package version 0.0.1, https://github.com/Teal-Insights/r-econid, https://teal-insights.github.io/r-econid/.","code":"@Manual{,   title = {econid: Economic Entity Identifier Standardization},   author = {{Teal Insights}},   year = {2025},   note = {R package version 0.0.1, https://github.com/Teal-Insights/r-econid},   url = {https://teal-insights.github.io/r-econid/}, }"},{"path":[]},{"path":"https://teal-insights.github.io/r-econid/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Economic Entity Identifier Standardization","text":"econid R package foundational building block econdataverse family packages aimed helping economists financial professionals work sovereign-level economic data. package aimed domain experts economics finance need analyze join data across multiple sources, aren’t necessarily R programming experts.","code":""},{"path":"https://teal-insights.github.io/r-econid/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Economic Entity Identifier Standardization","text":"Economic financial datasets present unique challenges working country-level data: Mixed Entity Types Datasets often combine different types entities “country” column: Countries sovereign states Territories administrative regions (e.g., Puerto Rico, Hong Kong) Geographic economic aggregates (e.g., “Sub-Saharan Africa”, “Low Income Countries”) International institutions (e.g., “World Bank”, “IMF”) Inconsistent Naming entity might appear various formats: Different codes (ISO-2, ISO-3, numeric codes) Various name formats (e.g., “United States”, “US”, “U.S..”) Historical names non-English variants Complex Analysis Needs Researchers often need : Compare individual countries regional aggregates (e.g., Nigeria vs. Sub-Saharan Africa) Join data across datasets different naming conventions Handle ambiguous cases (e.g., “Congo” refer multiple countries) Work specialized entities standard ISO lists econid addresses challenges : Robust name standardization clear entity type identification Flexible customization options special cases Warning systems missing ambiguous matches Tools fuzzy searching, filtering, joining across datasets","code":""},{"path":"https://teal-insights.github.io/r-econid/index.html","id":"design-philosophy","dir":"","previous_headings":"","what":"Design Philosophy","title":"Economic Entity Identifier Standardization","text":"design philosophy package follows tidyverse design principles tidy tools manifesto. strive practice human-centered design, clear documentation examples graceful handling edge cases. invite submit suggestions improvements extensions package’s Github Issues page. designed package handle common entities financial economic professionals might encounter dataset (249 total), handle every edge case. However, package allows users extend standardization list custom entities flexibly accommodate unconventional use case.","code":""},{"path":"https://teal-insights.github.io/r-econid/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Economic Entity Identifier Standardization","text":"install package CRAN, can use install.packages() function: install development version GitHub, can use remotes package: , load package R session Quarto RMarkdown notebook:","code":"install.packages(\"econid\") remotes::install_github(\"Teal-Insights/r-econid\") library(econid)"},{"path":"https://teal-insights.github.io/r-econid/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Economic Entity Identifier Standardization","text":"high-level overview econid works practice, followed detailed description main function parameters. examples tests illustrate typical usage patterns. Use patterns explore package integrate data cleaning workflows. finer-grained operations (e.g., fuzzy filter search), keep eye package future enhancements.","code":""},{"path":"https://teal-insights.github.io/r-econid/index.html","id":"package-summary","dir":"","previous_headings":"Usage","what":"Package Summary","title":"Economic Entity Identifier Standardization","text":"Input validation package checks input dataset specified columns exist. also ensures request valid output columns (e.g., \"entity_name\", \"entity_id\", \"entity_type\", \"iso2c\", \"iso3c\"). invalid columns raise error. Name code matching function standardize_entity() looks dataset names (optionally codes) might match entity. : Converts names UTF-8 consistent processing. Calls internal functions try matching entry via case-insensitive regex patterns. multiple columns provided, attempts match sequence, prioritizing matches earlier columns. multiple matches exist single row, warning raised (unless suppressed). Merging standardized columns function finds match, returns new augmented data frame standardized columns (e.g., \"entity_id\", \"entity_name\", \"entity_type\", etc.). control exactly standardized columns appear via output_cols argument. Handling missing custom cases Custom entities can added using add_entity_pattern() standardization entity matched, shows NA standardized columns. can specify fill missing values using fill_mapping parameter. can optionally specify default entity type unmatched entries (default_entity_type). Warnings issued ambiguous matches warn_ambiguous TRUE.","code":""},{"path":"https://teal-insights.github.io/r-econid/index.html","id":"workflow","dir":"","previous_headings":"Usage","what":"Workflow","title":"Economic Entity Identifier Standardization","text":"Workflow","code":""},{"path":"https://teal-insights.github.io/r-econid/index.html","id":"standardize_entity-function","dir":"","previous_headings":"Usage","what":"standardize_entity() Function","title":"Economic Entity Identifier Standardization","text":"can also use function directly without pipeline:","code":"# Basic example df <- data.frame(   entity = c(\"United States\", \"China\", \"NotACountry\"),   code = c(\"USA\", \"CHN\", \"ZZZ\"),   obs_value = c(1, 2, 3) )  # Using with dplyr pipeline library(dplyr)  df |>   standardize_entity(entity, code) |>   filter(!is.na(entity_id)) |>   mutate(entity_category = case_when(     entity_type == \"economy\" ~ \"Country\",     TRUE ~ \"Other\"   )) |>   select(entity_name, entity_category, obs_value) ##     entity_name entity_category obs_value ## 1 United States         Country         1 ## 2         China         Country         2 standardize_entity(   data = df,   entity, code,   output_cols = c(\"entity_id\", \"entity_name\", \"entity_type\"),   fill_mapping = c(entity_name = \"entity\"),   default_entity_type = NA_character_,   warn_ambiguous = TRUE ) ##   entity_id   entity_name entity_type        entity code obs_value ## 1       USA United States     economy United States  USA         1 ## 2       CHN         China     economy         China  CHN         2 ## 3      <NA>   NotACountry        <NA>   NotACountry  ZZZ         3"},{"path":"https://teal-insights.github.io/r-econid/index.html","id":"parameters","dir":"","previous_headings":"Usage > standardize_entity() Function","what":"Parameters","title":"Economic Entity Identifier Standardization","text":"data data frame (tibble) containing entities standardized. … Columns containing entity names /IDs. can specified using unquoted column names (e.g., entity_name) quoted column names (e.g., \"entity_name\"). Must specify least one column. multiple columns specified, function tries sequence, prioritizing matches earlier columns. output_cols (optional) character vector columns include final output. Valid options: \"entity_id\" \"entity_name\" \"entity_type\" \"iso3c\" \"iso2c\" Defaults c(\"entity_id\", \"entity_name\", \"entity_type\"). prefix (optional) character string prefix output column names. Useful standardizing multiple entities dataset (e.g., “country”, “counterpart”). fill_mapping (optional) named character vector specifying fill missing values entity match found. Names output column names (without prefix), values input column names (...). default_entity_type (optional) character scalar (\"economy\", \"organization\", \"aggregate\", \"\") assign entity type match found. value applies \"entity_type\" requested output_cols. four valid values selected cover common economic use cases: \"economy\": legal quasi-legal jurisdiction country autonomous region (e.g., “United States”, “Democratic Autonomous Administration North East Syria”) \"organization\": institution organization bank international agency (e.g., “World Bank”, “IMF”) \"aggregate\": geographic economic aggregate region development group (e.g., “Sub-Saharan Africa”, “Low Income Countries”) \"\": Anything doesn’t fit categories (e.g., “Elon Musk”, “Moon”) warn_ambiguous (optional) logical indicating whether warn single row data can match one entity. Defaults TRUE. overwrite (optional) logical indicating whether overwrite existing entity columns. Defaults TRUE. warn_overwrite (optional) logical indicating whether warn overwriting existing entity columns. Defaults TRUE. .(optional) Column name position insert standardized columns . NULL (default), columns inserted beginning dataframe. Can character vector specifying column name numeric value specifying column index.","code":""},{"path":"https://teal-insights.github.io/r-econid/index.html","id":"returns","dir":"","previous_headings":"Usage > standardize_entity() Function","what":"Returns","title":"Economic Entity Identifier Standardization","text":"data frame (tibble) size data, augmented requested standardized columns.","code":""},{"path":"https://teal-insights.github.io/r-econid/index.html","id":"working-with-multiple-entities","dir":"","previous_headings":"Usage","what":"Working with Multiple Entities","title":"Economic Entity Identifier Standardization","text":"standardize_entity() function can used standardize multiple entities dataset using prefix parameter:","code":"df <- data.frame(   country_name = c(\"United States\", \"France\"),   counterpart_name = c(\"China\", \"Germany\") )  df |>   standardize_entity(country_name) |>   standardize_entity(counterpart_name, prefix = \"counterpart\") ##   counterpart_entity_id counterpart_entity_name counterpart_entity_type ## 1                   CHN                   China                 economy ## 2                   DEU                 Germany                 economy ##   entity_id   entity_name entity_type  country_name counterpart_name ## 1       USA United States     economy United States            China ## 2       FRA        France     economy        France          Germany"},{"path":"https://teal-insights.github.io/r-econid/index.html","id":"add_entity_pattern-function","dir":"","previous_headings":"Usage","what":"add_entity_pattern() Function","title":"Economic Entity Identifier Standardization","text":"add_entity_pattern() function allows add custom entity patterns package. useful need standardize entities default list.","code":"add_entity_pattern(   \"BJ-CITY\",   \"Beijing City\",   entity_type = \"economy\",   aliases = c(\"Beijing Municipality\") )  df_custom <- data.frame(entity = c(\"United States\", \"Beijing Municipality\")) result_custom <- standardize_entity(df_custom, entity) print(result_custom) ##   entity_id   entity_name entity_type               entity ## 1       USA United States     economy        United States ## 2   BJ-CITY  Beijing City     economy Beijing Municipality"},{"path":"https://teal-insights.github.io/r-econid/index.html","id":"reset_custom_entity_patterns-function","dir":"","previous_headings":"Usage","what":"reset_custom_entity_patterns() Function","title":"Economic Entity Identifier Standardization","text":"reset_custom_entity_patterns() function allows clear custom entity patterns added current R session. useful want start fresh default entity patterns.","code":""},{"path":"https://teal-insights.github.io/r-econid/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Economic Entity Identifier Standardization","text":"welcome feedback contributions! Please submit suggestions improvements extensions package’s Github Issues page.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/add_entity_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a custom entity pattern — add_entity_pattern","title":"Add a custom entity pattern — add_entity_pattern","text":"function allows users extend default entity patterns custom entry.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/add_entity_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a custom entity pattern — add_entity_pattern","text":"","code":"add_entity_pattern(   entity_id,   entity_name,   entity_type,   aliases = NULL,   entity_regex = NULL )"},{"path":"https://teal-insights.github.io/r-econid/reference/add_entity_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a custom entity pattern — add_entity_pattern","text":"entity_id unique identifier entity. entity_name standard (canonical) name entity. entity_type character string describing type entity (\"economy\", \"organization\", \"aggregate\", \"\"). aliases optional character vector alternative names identifying entity. provided, automatically combined (using pipe operator, \"|\") entity_name entity_id construct regular expression pattern. entity_regex optional custom regular expression pattern. supplied, overrides regex automatically constructed aliases.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/add_entity_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a custom entity pattern — add_entity_pattern","text":"NULL. side effect function, custom pattern stored internal tibble current session.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/add_entity_pattern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a custom entity pattern — add_entity_pattern","text":"Custom entity patterns can added top script (interactively) appended built-patterns using list_entity_patterns(). makes possible users register alternative names (aliases) entities might appear economic datasets. custom entity patterns kept separately appended default patterns retrieving entity_patterns via list_entity_patterns(). custom patterns persist length R session.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/add_entity_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a custom entity pattern — add_entity_pattern","text":"","code":"if (FALSE) { # \\dontrun{   add_entity_pattern(     \"EU\",     \"European Union\",     \"economy\",     aliases = c(\"Europe\")   )   patterns <- list_entity_patterns() } # }"},{"path":"https://teal-insights.github.io/r-econid/reference/create_entity_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"Create entity Name Regex Pattern — create_entity_regex","title":"Create entity Name Regex Pattern — create_entity_regex","text":"Creates regular expression pattern one entity names, following standardized rules flexible matching. function converts input name lowercase, escapes special regex characters, replaces spaces flexible whitespace pattern (.?). individual patterns joined pipe operator (|) produce regex matches supplied names.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/create_entity_regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create entity Name Regex Pattern — create_entity_regex","text":"","code":"create_entity_regex(names)"},{"path":"https://teal-insights.github.io/r-econid/reference/create_entity_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create entity Name Regex Pattern — create_entity_regex","text":"names character vector entity names.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/create_entity_regex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create entity Name Regex Pattern — create_entity_regex","text":"character string containing combined regex pattern.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/entity_patterns.html","id":null,"dir":"Reference","previous_headings":"","what":"Entity Patterns — entity_patterns","title":"Entity Patterns — entity_patterns","text":"dataset containing patterns matching entity names. dataset accessible list_entity_patterns.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/entity_patterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Entity Patterns — entity_patterns","text":"","code":"entity_patterns"},{"path":"https://teal-insights.github.io/r-econid/reference/entity_patterns.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Entity Patterns — entity_patterns","text":"data frame following columns: entity_id Unique identifier entity entity_name entity name iso3c ISO 3166-1 alpha-3 code iso2c ISO 3166-1 alpha-2 code entity_type Type entity (\"economy\", \"organization\", \"aggregate\", \"\") entity_regex Regular expression pattern matching entity names","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/entity_patterns.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Entity Patterns — entity_patterns","text":"Data manually prepared Teal L. Emery","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/list_entity_patterns.html","id":null,"dir":"Reference","previous_headings":"","what":"List entity patterns — list_entity_patterns","title":"List entity patterns — list_entity_patterns","text":"function returns tibble containing regular expression patterns identifying economic indicators. combines patterns built-entity_patterns dataset custom patterns stored .econid_env environment.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/list_entity_patterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List entity patterns — list_entity_patterns","text":"","code":"list_entity_patterns()"},{"path":"https://teal-insights.github.io/r-econid/reference/list_entity_patterns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List entity patterns — list_entity_patterns","text":"data frame following columns: entity_id entity id entity_name entity name iso2c ISO 3166-1 alpha-2 code iso3c ISO 3166-1 alpha-3 code entity_type entity type entity_regex Regular expression pattern matching entity names","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/list_entity_patterns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List entity patterns — list_entity_patterns","text":"","code":"patterns <- list_entity_patterns()"},{"path":"https://teal-insights.github.io/r-econid/reference/match_entities_with_patterns.html","id":null,"dir":"Reference","previous_headings":"","what":"Match entities with patterns using fuzzyjoin — match_entities_with_patterns","title":"Match entities with patterns using fuzzyjoin — match_entities_with_patterns","text":"Given data frame vector target columns, perform regex matching target columns entities matched run columns match. Warn ambiguous matches (duplicate entity_id values). Return data frame mapping target columns entity patterns.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/match_entities_with_patterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match entities with patterns using fuzzyjoin — match_entities_with_patterns","text":"","code":"match_entities_with_patterns(   data,   target_cols,   patterns,   warn_ambiguous = TRUE )"},{"path":"https://teal-insights.github.io/r-econid/reference/match_entities_with_patterns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match entities with patterns using fuzzyjoin — match_entities_with_patterns","text":"data data frame containing columns match target_cols Character vector column names match patterns Data frame containing entity patterns; NULL, uses list_entity_patterns() warn_ambiguous Logical; whether warn ambiguous matches","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/match_entities_with_patterns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match entities with patterns using fuzzyjoin — match_entities_with_patterns","text":"data frame unique combinations target columns mapped entity patterns","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/reset_custom_entity_patterns.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset custom entity patterns — reset_custom_entity_patterns","title":"Reset custom entity patterns — reset_custom_entity_patterns","text":"function resets custom entity patterns added current R session.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/reset_custom_entity_patterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset custom entity patterns — reset_custom_entity_patterns","text":"","code":"reset_custom_entity_patterns()"},{"path":"https://teal-insights.github.io/r-econid/reference/reset_custom_entity_patterns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset custom entity patterns — reset_custom_entity_patterns","text":"Invisibly returns NULL.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/reset_custom_entity_patterns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset custom entity patterns — reset_custom_entity_patterns","text":"","code":"if (FALSE) { # \\dontrun{   add_entity_pattern(\"EU\", \"European Union\", \"economy\")   reset_custom_entity_patterns()  # Clears the custom pattern } # }"},{"path":"https://teal-insights.github.io/r-econid/reference/standardize_entity.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize Entity Identifiers — standardize_entity","title":"Standardize Entity Identifiers — standardize_entity","text":"Standardizes entity identifiers (e.g., name, ISO code) economic data frame matching predefined list regex patterns add columns containing standardized identifiers data frame.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/standardize_entity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize Entity Identifiers — standardize_entity","text":"","code":"standardize_entity(   data,   ...,   output_cols = c(\"entity_id\", \"entity_name\", \"entity_type\"),   prefix = NULL,   fill_mapping = NULL,   default_entity_type = NA_character_,   warn_ambiguous = TRUE,   overwrite = TRUE,   warn_overwrite = TRUE,   .before = NULL )"},{"path":"https://teal-insights.github.io/r-econid/reference/standardize_entity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize Entity Identifiers — standardize_entity","text":"data data frame tibble containing entity identifiers standardize ... Columns containing entity names /IDs. can specified using unquoted column names (e.g., entity_name, entity_id) quoted column names (e.g., \"entity_name\", \"entity_id\").  Must specify least one column. two columns specified, first assumed entity name second assumed entity ID. output_cols Character vector specifying desired output columns. Options \"entity_id\", \"entity_name\", \"entity_type\", \"iso3c\", \"iso2c\". Defaults c(\"entity_id\", \"entity_name\", \"entity_type\"). prefix Optional character string prefix output column names. Useful standardizing multiple entities dataset (e.g., \"country\", \"counterpart\"). provided, output columns named prefix_entity_id, prefix_entity_name, etc. (underscore automatically inserted prefix column name). fill_mapping Named character vector specifying fill missing values entity match found. Names output column names (without prefix), values input column names (...). example, c(entity_id = \"country_code\", entity_name = \"country_name\") fill missing entity_id values values country_code column missing entity_name values values country_name column. default_entity_type Character NA; default entity type use entities match patterns. Options \"economy\", \"organization\", \"aggregate\", \"\", NA_character_. Defaults NA_character_. argument used \"entity_type\" included output_cols. warn_ambiguous Logical; whether warn ambiguous matches overwrite Logical; whether overwrite existing entity_* columns warn_overwrite Logical; whether warn overwriting existing entity_* columns. Defaults TRUE. .Column name position insert standardized columns . NULL (default), columns inserted beginning dataframe. Can character vector specifying column name numeric value specifying column index. specified column found data, error thrown.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/standardize_entity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize Entity Identifiers — standardize_entity","text":"data frame standardized entity information merged input data. standardized columns placed directly left first target column.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/standardize_entity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize Entity Identifiers — standardize_entity","text":"","code":"# Standardize entity names and IDs in a data frame test_df <- tibble::tribble(   ~entity,         ~code,   \"United States\",  \"USA\",   \"united.states\",  NA,   \"us\",             \"US\",   \"EU\",             NA,   \"NotACountry\",    NA )  standardize_entity(test_df, entity, code) #> # A tibble: 5 × 5 #>   entity_id entity_name   entity_type entity        code  #>   <chr>     <chr>         <chr>       <chr>         <chr> #> 1 USA       United States economy     United States USA   #> 2 USA       United States economy     united.states NA    #> 3 USA       United States economy     us            US    #> 4 NA        NA            NA          EU            NA    #> 5 NA        NA            NA          NotACountry   NA     # Standardize with fill_mapping for unmatched entities standardize_entity(   test_df,   entity, code,   fill_mapping = c(entity_id = \"code\", entity_name = \"entity\") ) #> # A tibble: 5 × 5 #>   entity_id entity_name   entity_type entity        code  #>   <chr>     <chr>         <chr>       <chr>         <chr> #> 1 USA       United States economy     United States USA   #> 2 USA       United States economy     united.states NA    #> 3 USA       United States economy     us            US    #> 4 NA        EU            NA          EU            NA    #> 5 NA        NotACountry   NA          NotACountry   NA     # Standardize multiple entities in sequence with a prefix df <- data.frame(   country_name = c(\"United States\", \"France\"),   counterpart_name = c(\"China\", \"Germany\") ) df |>   standardize_entity(     country_name   ) |>   standardize_entity(     counterpart_name,     prefix = \"counterpart\"   ) #>   counterpart_entity_id counterpart_entity_name counterpart_entity_type #> 1                   CHN                   China                 economy #> 2                   DEU                 Germany                 economy #>   entity_id   entity_name entity_type  country_name counterpart_name #> 1       USA United States     economy United States            China #> 2       FRA        France     economy        France          Germany"},{"path":"https://teal-insights.github.io/r-econid/reference/validate_entity_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate inputs for entity standardization — validate_entity_inputs","title":"Validate inputs for entity standardization — validate_entity_inputs","text":"Validates input data frame column names entity standardization.","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/validate_entity_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate inputs for entity standardization — validate_entity_inputs","text":"","code":"validate_entity_inputs(   data,   target_cols_names,   output_cols,   prefix,   fill_mapping = NULL )"},{"path":"https://teal-insights.github.io/r-econid/reference/validate_entity_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate inputs for entity standardization — validate_entity_inputs","text":"data data frame tibble validate target_cols_names Character vector column names containing entity identifiers output_cols Character vector requested output columns prefix Optional character string prefix output column names fill_mapping Named character vector specifying fill missing values","code":""},{"path":"https://teal-insights.github.io/r-econid/reference/validate_entity_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate inputs for entity standardization — validate_entity_inputs","text":"Invisible NULL","code":""},{"path":"https://teal-insights.github.io/r-econid/news/index.html","id":"econid-001","dir":"Changelog","previous_headings":"","what":"econid 0.0.1","title":"econid 0.0.1","text":"Initial CRAN submission.","code":""}]
